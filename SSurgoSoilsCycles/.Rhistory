# SELECT
# saversion, saverest, -- attributes from table "sacatalog"
# l.areasymbol, l.areaname, l.lkey, -- attributes from table "legend"
# musym, muname, museq, mu.mukey, -- attributes from table "mapunit"
# comppct_r, compname, localphase, slope_r, c.cokey, -- attributes from table "component"
# hzdept_r, hzdepb_r, ch.chkey, -- attributes from table "chorizon"
# sandtotal_r, silttotal_r, claytotal_r, --total sand, silt and clay fractions from table "chorizon"
# sandvc_r, sandco_r, sandmed_r, sandfine_r, sandvf_r,--sand sub-fractions from table "chorizon"
# texdesc, texture, stratextsflag, chtgrp.rvindicator, -- attributes from table "chtexturegrp"
# texcl, lieutex, -- attributes from table "chtexture"
# texmod -- attributes from table "chtexturemod"
# FROM sacatalog sac
# INNER JOIN legend l ON l.areasymbol = sac.areasymbol AND l.areatypename = 'Non-MLRA Soil Survey Area'
# INNER JOIN mapunit mu ON mu.lkey = l.lkey
# AND mu.mukey IN
# ('107559','107646','107674','107682','107707','107794','107853','107854','107865','107867','107869','107870','107871')
# LEFT OUTER JOIN component c ON c.mukey = mu.mukey
# LEFT OUTER JOIN chorizon ch ON ch.cokey = c.cokey
# LEFT OUTER JOIN chtexturegrp chtgrp ON chtgrp.chkey = ch.chkey
# LEFT OUTER JOIN chtexture cht ON cht.chtgkey = chtgrp.chtgkey
# LEFT OUTER JOIN chtexturemod chtmod ON chtmod.chtkey = cht.chtkey
# --WHERE.
# --ORDER BY l.areaname, museq, comppct_r DESC, compname, hzdept_r -- standard soil report ordering
# --Sample query ends.
# extract the map unit keys from the RAT, and format for use in an SQL IN-statement
#in.statement2 <- format_SQL_in_statement(MUKEYS$ID);
in.statement2 <- format_SQL_in_statement(MUKEYS);
# The above is teh same as the two instructions below combined
# Temp_1 <- paste(MUKEYS, collapse="','") ;
# Temp_2<- paste("('", Temp_1 , "')", sep='') ;
# format query in SQL- raw data are returned
Pedon.query<- paste0("SELECT component.mukey, component.cokey, compname, comppct_r, majcompflag, slope_r, hzdept_r, hzdepb_r,hzthk_r, hzname, awc_r, sandtotal_r, silttotal_r, claytotal_r, om_r,dbtenthbar_r, dbthirdbar_r, dbfifteenbar_r, fraggt10_r, frag3to10_r, sieveno10_r, sieveno40_r, sieveno200_r, ksat_r  FROM component JOIN chorizon ON component.cokey = chorizon.cokey AND mukey IN ", in.statement2," ORDER BY mukey, comppct_r DESC, hzdept_r ASC") ;
# now get component and horizon-level data for these map unit keys
Pedon.info<-SDA_query(Pedon.query);
head(Pedon.info) ;
str(Pedon.info)  ;
# filter components that are the major components of each unit map with the Flag majcompflag=='Yes'
Pedon.info.MajorC<-Pedon.info[which(Pedon.info$majcompflag == 'Yes'),]  ;
head(Pedon.info.MajorC) ;
str(Pedon.info.MajorC)  ;
# check if there are mukeys with more than one dominant component
Pedon.info.MajorC$mukey.factor<-as.factor(Pedon.info.MajorC$mukey) ;
str(Pedon.info.MajorC$mukey.factor)
Pedon.info.MajorC$mukey_comppct_r<-paste(Pedon.info.MajorC$mukey.factor,Pedon.info.MajorC$comppct_r, sep = "_") ;
# Select major component mukeys that have also the highest component percent comppct_r
head(Pedon.info.MajorC)  ;
Dominant<- aggregate(comppct_r ~ mukey.factor, data=Pedon.info.MajorC, FUN="max" , drop=T, simplify=T) ;
head(Dominant)  ;
str(Dominant) ;
Dominant$mukey_comppct_r<-paste(Dominant$mukey.factor,Dominant$comppct_r, sep ="_");
Mukey.Pedon<-Pedon.info.MajorC[Pedon.info.MajorC$mukey_comppct_r %in% Dominant$mukey_comppct_r,]  ;
str(Mukey.Pedon) ;
# Creating Mukey ID for each dominant component
Mukey.Pedon$mukey_ID<-as.character(Mukey.Pedon$mukey) ;
str(Mukey.Pedon);
#  Transform the Pedon.info query in to the right format to be converted into a SoilProfileCollection object
#   https://ncss-tech.github.io/AQP/aqp/aqp-intro.html
#Pedon.info$id<-Pedon.info$mukey ;
# Pedon.info$top<-Pedon.info$hzdept_r ;
# Pedon.info$bottom<-Pedon.info$hzdept_r ;
#Pedon.info$name<-Pedon.info$hzname ;
depths(Mukey.Pedon)<-mukey_ID ~ hzdept_r + hzdepb_r  ;
str(Mukey.Pedon@horizons) ;
plot(Mukey.Pedon, name='hzname',color='dbthirdbar_r')  ;
plot(Mukey.Pedon[3:10,], name='hzname',color='dbthirdbar_r')  ;
Pedon.query<- paste0("SELECT component.mukey, component.cokey, compname, comppct_r, majcompflag, slope_r, hzdept_r, hzdepb_r,hzthk_r, hzname, awc_r, sandtotal_r, silttotal_r, claytotal_r, om_r,dbtenthbar_r, dbthirdbar_r, dbfifteenbar_r, fraggt10_r, frag3to10_r, sieveno10_r, sieveno40_r, sieveno200_r, ksat_r  FROM component JOIN chorizon ON component.cokey = chorizon.cokey AND mukey IN ", in.statement2," ORDER BY mukey, comppct_r DESC, hzdept_r ASC") ;
# now get component and horizon-level data for these map unit keys
Pedon.info<-SDA_query(Pedon.query);
head(Pedon.info) ;
str(Pedon.info)  ;
Pedon.info.MajorC<-Pedon.info[which(Pedon.info$majcompflag == 'Yes'),]  ;
head(Pedon.info.MajorC) ;
str(Pedon.info.MajorC)  ;
Pedon.info.MajorC$mukey.factor<-as.factor(Pedon.info.MajorC$mukey) ;
str(Pedon.info.MajorC$mukey.factor)
Pedon.info.MajorC$mukey_comppct_r<-paste(Pedon.info.MajorC$mukey.factor,Pedon.info.MajorC$comppct_r, sep = "_") ;
head(Pedon.info.MajorC)  ;
Dominant<- aggregate(comppct_r ~ mukey.factor, data=Pedon.info.MajorC, FUN="max" , drop=T, simplify=T) ;
head(Dominant)  ;
str(Dominant) ;
Dominant$mukey_comppct_r<-paste(Dominant$mukey.factor,Dominant$comppct_r, sep ="_");
Mukey.Pedon<-Pedon.info.MajorC[Pedon.info.MajorC$mukey_comppct_r %in% Dominant$mukey_comppct_r,]  ;
str(Mukey.Pedon) ;
Mukey.Pedon$mukey_ID<-as.character(Mukey.Pedon$mukey) ;
str(Mukey.Pedon);
depths(Mukey.Pedon)<-mukey_ID ~ hzdept_r + hzdepb_r  ;
str(Mukey.Pedon@horizons) ;
plot(Mukey.Pedon, name='hzname',color='dbthirdbar_r')  ;
plot(Mukey.Pedon[3:10,], name='hzname',color='dbthirdbar_r')  ;
Mukey.Try<-Mukey.Pedon[3:5,] ;
plot(Mukey.Try,name='hzname',color='dbthirdbar_r')
str(Mukey.Try)
View(Mukey.Try@horizons)
Cycles.soil.data<-slab(Mukey.Try,fm=mukey_ID ~ sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
str(Cycles.soil.data)
View(Cycles.soil.data)
d <- ldply(1:9, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP')
d <- ldply(1:9, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP')
library(aqp) ;
d <- ldply(1:9, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP')
library(reshape2)
d <- ldply(1:9, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP')
d <- ldply(1:9, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP')
ldply(1:9, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP')
library(reshape2)
ldply(1:9, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP')
library(reshape)
ldply(1:9, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP')
1:9
random_profile
random_profile(1:5)
random_profile(1:5, n = c(3, 4, 5, 6), method="LLP")
random_profile(1:5, n = c(3, 4, 5, 6), method="LPP")
random_profile(1:5, n = c(3, 4, 5, 6), method="LPP",n_prop=1)
random_profile(1:5, n = c(3, 4, 5, 6), n_prop=1, method="LPP")
random_profile(1:6, n = c(3, 4, 5, 6), n_prop=1, method="LPP")
random_profile(1:9, n = c(3, 4, 5, 6), n_prop=1, method="LPP")
random_profile(1:9, n = c(3, 4, 5, 6), method="LPP")
random_profile(1:5, n = c(3, 4, 5, 6), method="LPP")
random_profile(1:5, n = c(3, 4, 5, 6), method="LPP")
sliced<-aqp::slice(Mukey.Pedon, fm = 1:max(Mukey.Pedon) ~ sandtotal_r + silttotal_r + claytotal_r + om_r + dbthirdbar_r + mukey.factor ) ;
plot(sliced, name='hzname', color='om_r') ;
random_profile(1:5, n = c(3, 4, 5, 6), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
sliced<-aqp::slice(Mukey.Pedon, fm = 1:max(Mukey.Pedon) ~ sandtotal_r + silttotal_r + claytotal_r + om_r + dbthirdbar_r + mukey.factor ) ;
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, n = c(3, 4, 5), method="LPP")
random_profile(1:5, method="LPP")
random_profile(a, method="LPP")
random_profile("FIRST", method="LPP")
random_profile("FIRST",n_prop=1, method="LPP")
rbind(random_profile("FIRST",n_prop=1, method="LPP"),random_profile("SECOND",n_prop=1, method="LPP"))
rbind(random_profile("FIRST",n_prop=1, method="LPP"),random_profile("SECOND",n_prop=1, method="LPP"),random_profile("THIRD",n_prop=1, method="LPP"))
rbind(random_profile("FIRST",n_prop=1, method="LPP"),random_profile("SECOND",n_prop=1, method="LPP"),random_profile("THIRD",n_prop=1, method="LPP"),random_profile("FOURTH",n_prop=1, method="LPP"))
d<-rbind(random_profile("FIRST",n_prop=1, method="LPP"),random_profile("SECOND",n_prop=1, method="LPP"),random_profile("THIRD",n_prop=1, method="LPP"),random_profile("FOURTH",n_prop=1, method="LPP"))
depths(d)<-id ~ top + bottom
d<-rbind(random_profile("FIRST",n_prop=1, method="LPP"),random_profile("SECOND",n_prop=1, method="LPP"),random_profile("THIRD",n_prop=1, method="LPP"),random_profile("FOURTH",n_prop=1, method="LPP"))
View(d)
str(d)
View(d)
d<-[order(d$id,d$top),]
d2<-d[order(d$id,d$top),]
View(d2)
order(d$id)
str(d)
-as.character(d$id)
as.character(d$id)
d$ID_CHAR<-as.character(d$id)
d2<-d[order(d$ID_CHAR,d$top),]
View(d2)
depths(d2)<-ID_CHAR ~ top + bottom
View(d2)
View(d2@horizons)
d<-rbind(random_profile("FIRST",n_prop=2, method="LPP"),random_profile("SECOND",n_prop=2, method="LPP"),random_profile("THIRD",n_prop=2, method="LPP"),random_profile("FOURTH",n_prop=2, method="LPP"))
str(d)
View(d)
str(d)
View(d)
d$ID_CHAR<-as.character(d$id)
View(d)
d2<-d[order(d$ID_CHAR,d$top),]
View(d2)
depths(d2)<-ID_CHAR ~ top + bottom
View(d2@horizons)
View(d2@horizons)
plot(d2, name='hzID',color='p1')
plot(d2, name='hzID',color='p2')
sliced<-aqp::slice(Mukey.Pedon, fm = 1:max(Mukey.Pedon) ~ sandtotal_r + silttotal_r + claytotal_r + om_r + dbthirdbar_r + mukey.factor ) ;
gsm.depths <- c(0, 5, 15, 30, 60, 100, 200)
str(d2)
d.gsm <- slab(d2, fm=ID_CHAR ~ p1+p2, slab.structure = gsm.depths, slab.fun = mean, na.rm=TRUE)
gsm.depths <- c(0, 5, 15, 30, 60, 100, 200)
d.gsm <- slab(d2, fm=ID_CHAR ~ p1+p2, slab.structure = gsm.depths, slab.fun = mean, na.rm=TRUE)
d.gsm <- slab(d2, fm=id ~ p1+p2, slab.structure = gsm.depths, slab.fun = mean, na.rm=TRUE)
d.gsm <- slab(d2, fm=ID_CHAR ~ p1+p2, slab.structure = gsm.depths, slab.fun = mean, na.rm=TRUE)
gsm.depths <- c(0, 15, 30, 60)
d.gsm <- slab(d2, fm=ID_CHAR ~ p1+p2, slab.structure = gsm.depths, slab.fun = mean, na.rm=TRUE)
str(d.gsm)
View(d.gsm)
d.gsm %>%
spread(key = variable, value=value )
depths(d.gsm)<-ID_CHAR ~ top + bottom
plot(d.gsm,color='p2' )
depths(d.gsm.pedons)
d.gsm.pedons$hzname
d.gsm$hzname
d.gsm$hzname <- profileApply(d.gsm, function(i) {paste0('GSM-', 1:nrow(i))})
plot(d.gsm,color='p2' )
View(d.gsm)
View(d.gsm@horizons)
d.gsm %>%
spread(key = variable, value=value )
d.gsm <- slab(d2, fm=ID_CHAR ~ p1+p2, slab.structure = gsm.depths, slab.fun = mean, na.rm=TRUE)
str(d.gsm)
View(d.gsm)
d.gsm %>%
spread(key = variable, value=value )
d.gsm %>%
spread(key = variable, value=value )
d.gsm.2<-d.gsm %>%
spread(key = variable, value=value )
d.gsm.2<-d.gsm %>%
spread(key = variable, value=value )
depths(d.gsm.2)<-ID_CHAR ~ top + bottom
d.gsm.2$hzname <- profileApply(d.gsm.2, function(i) {paste0('GSM-', 1:nrow(i))})
View(d.gsm.2@horizons)
plot(d.gsm.2, color='p2' )
Mukey.Try<-Mukey.Pedon[3:5,] ;
plot(Mukey.Try,name='hzname',color='dbthirdbar_r')
str(Mukey.Try)
View(Mukey.Try@horizons)
Cycles.soil.data<-slab(Mukey.Try,fm=mukey_ID ~ sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
str(Cycles.soil.data)
Cycles.soil.data<-slab(Mukey.Try,fm=mukey_ID ~ sandtotal_r + silttotal_r + claytotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
str(Cycles.soil.data)
View(Cycles.soil.data)
Cycles.soil.data.2<-Cycles.soil.data %>%
spread(key = variable, value=value )
str(Cycles.soil.data.2)
depths(Cycles.soil.data.2)<-mukey_ID ~ top + bottom
str(Cycles.soil.data.2@horizons)
View(Cycles.soil.data.2@horizons)
Cycles.soil.data.2$hzname <- profileApply(Cycles.soil.data.2, function(i) {paste0('Cycles-', 1:nrow(i))})
str(Cycles.soil.data.2@horizons)
View(Cycles.soil.data.2@horizons)
plot(Cycles.soil.data.2,  name='hzname',color='sandtotal_r ')
names(Cycles.soil.data.2@horizons)
plot(Cycles.soil.data.2,  name='hzname', color='sandtotal_r')
plot(Mukey.Pedon[3:5,], name='hzname',color='sandtotal_r')  ;
plot(Cycles.soil.data.2,  name='hzname', color='sandtotal_r')
Mukey.Try<-Mukey.Pedon[3:5,] ;
plot(Mukey.Try,name='hzname',color='dbthirdbar_r')
str(Mukey.Try)
View(Mukey.Try@horizons)
Cycles.soil.data<-slab(Mukey.Try,fm=mukey_ID ~ claytotal_r + sandtotal_r + silttotal_r + om_r + dbthirdbar_r , slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
Cycles.soil.data.2<-Cycles.soil.data %>%
spread(key = variable, value=value )
str(Cycles.soil.data.2)
depths(Cycles.soil.data.2)<-mukey_ID ~ top + bottom
Cycles.soil.data.2$hzname <- profileApply(Cycles.soil.data.2, function(i) {paste0('Cycles-', 1:nrow(i))})
str(Cycles.soil.data.2@horizons)
View(Cycles.soil.data.2@horizons)
plot(Mukey.Pedon[3:5,], name='hzname',color='sandtotal_r')  ;
plot(Cycles.soil.data.2,  name='hzname', color='sandtotal_r')
plot(Mukey.Pedon,name='hzname',color='dbthirdbar_r')
Cycles.soil.data<-slab(Mukey.Pedon,fm=mukey_ID ~ claytotal_r + sandtotal_r + silttotal_r + om_r + dbthirdbar_r , slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
Cycles.soil.data.2<-Cycles.soil.data %>%
spread(key = variable, value=value )
str(Cycles.soil.data.2)
depths(Cycles.soil.data.2)<-mukey_ID ~ top + bottom
Cycles.soil.data.2$hzname <- profileApply(Cycles.soil.data.2, function(i) {paste0('Cycles-', 1:nrow(i))})
str(Cycles.soil.data.2@horizons)
View(Cycles.soil.data.2@horizons)
plot(Mukey.Pedon, name='hzname',color='sandtotal_r')  ;
plot(Cycles.soil.data.2,  name='hzname', color='sandtotal_r')
##############################################################################################################
#
#
# Program to get soil files for cycles from a shape file and a raster fiel
#
#
#
#
#
#
#  Felipe Montes 2019 11/18
#
#
#
#
###############################################################################################################
###############################################################################################################
#                             Tell the program where the package libraries are stored
###############################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
###############################################################################################################
#                             Setting up working directory  Loading Packages and Setting up working directory
###############################################################################################################
#      set the working directory
setwd('C:/Felipe/CYCLES/CyclesRCodeScripts/CyclesRCodeScripts/SSurgoSoilsCycles') ;
###############################################################################################################
#                            Install the packages that are needed
###############################################################################################################
# Install the packages that are needed #
# Install the packages that are needed #
# install.packages('soilDB', dep=TRUE) # stable version from CRAN + dependencies
# install.packages("soilDB", repos="http://R-Forge.R-project.org") # most recent copy from r-forge
# install.packages("rgdal", dep = TRUE)
# install.packages("aqp", dep=TRUE)
# install.packages("reshape2", dep=TRUE)
#install.packages("openxlsx", dep=TRUE)
###############################################################################################################
#                           load the libraries that are neded
###############################################################################################################
library(rgdal) ;
library(soilDB) ;
library(aqp) ;
library(reshape2) ;
library(openxlsx);
###############################################################################################################
#                           import the shape files from QGIS with the MUKEY mode from each triangle
###############################################################################################################
########### Read infromation about the shape files ###########
Project.mesh.info<-ogrInfo('./SSURGOShapeFiles/MergeFeatures_q30_a1000000_o.shp')  ;
#### read the shape file that has been created in QGIS using the zonal statistics
Project.GSSURGO<-readOGR('./SSURGOShapeFiles/MergeFeatures_q30_a1000000_o.shp')  ;
head(Project.GSSURGO@data)
str(Project.GSSURGO, max.level = 2) ;
plot(Project.GSSURGO) ;
str(Project.GSSURGO@data)  ;
#### Extract the Mukeys corresponding to the mode in each mesh triangle
Project.GSSURGO@data$MUKEYS.mode<-as.factor(Project.GSSURGO@data$GSURGO_Mod) ;
MUKEYS<-levels(Project.GSSURGO@data$MUKEYS.mode)  ;
str(MUKEYS)  ;
###############################################################################################################
#                           Query the Soil Data access database with SQL through R
###############################################################################################################
# from https://sdmdataaccess.sc.egov.usda.gov/queryhelp.aspx
# and https://sdmdataaccess.sc.egov.usda.gov/documents/ReturningSoilTextureRelatedAttributes.pdf
# --Sample query begins.
# --Note that a pair of dashes denotes the beginning of a comment.
# SELECT
# saversion, saverest, -- attributes from table "sacatalog"
# l.areasymbol, l.areaname, l.lkey, -- attributes from table "legend"
# musym, muname, museq, mu.mukey, -- attributes from table "mapunit"
# comppct_r, compname, localphase, slope_r, c.cokey, -- attributes from table "component"
# hzdept_r, hzdepb_r, ch.chkey, -- attributes from table "chorizon"
# sandtotal_r, silttotal_r, claytotal_r, --total sand, silt and clay fractions from table "chorizon"
# sandvc_r, sandco_r, sandmed_r, sandfine_r, sandvf_r,--sand sub-fractions from table "chorizon"
# texdesc, texture, stratextsflag, chtgrp.rvindicator, -- attributes from table "chtexturegrp"
# texcl, lieutex, -- attributes from table "chtexture"
# texmod -- attributes from table "chtexturemod"
# FROM sacatalog sac
# INNER JOIN legend l ON l.areasymbol = sac.areasymbol AND l.areatypename = 'Non-MLRA Soil Survey Area'
# INNER JOIN mapunit mu ON mu.lkey = l.lkey
# AND mu.mukey IN
# ('107559','107646','107674','107682','107707','107794','107853','107854','107865','107867','107869','107870','107871')
# LEFT OUTER JOIN component c ON c.mukey = mu.mukey
# LEFT OUTER JOIN chorizon ch ON ch.cokey = c.cokey
# LEFT OUTER JOIN chtexturegrp chtgrp ON chtgrp.chkey = ch.chkey
# LEFT OUTER JOIN chtexture cht ON cht.chtgkey = chtgrp.chtgkey
# LEFT OUTER JOIN chtexturemod chtmod ON chtmod.chtkey = cht.chtkey
# --WHERE.
# --ORDER BY l.areaname, museq, comppct_r DESC, compname, hzdept_r -- standard soil report ordering
# --Sample query ends.
# extract the map unit keys from the RAT, and format for use in an SQL IN-statement
#in.statement2 <- format_SQL_in_statement(MUKEYS$ID);
in.statement2 <- format_SQL_in_statement(MUKEYS);
# The above is teh same as the two instructions below combined
# Temp_1 <- paste(MUKEYS, collapse="','") ;
# Temp_2<- paste("('", Temp_1 , "')", sep='') ;
# format query in SQL- raw data are returned
# Pedon.query<- paste0("SELECT component.mukey, component.cokey, component.compname, component.taxorder, component.taxsuborder, component.taxgrtgroup, component.taxsubgrp, comppct_r, majcompflag, slope_r, hzdept_r, hzdepb_r,hzthk_r, hzname, awc_r, sandtotal_r, silttotal_r, claytotal_r, om_r,dbtenthbar_r, dbthirdbar_r, dbfifteenbar_r, fraggt10_r, frag3to10_r, sieveno10_r, sieveno40_r, sieveno200_r, ksat_r, hydgrp  FROM component JOIN chorizon ON component.cokey = chorizon.cokey AND mukey IN", in.statement2," ORDER BY component.mukey, comppct_r DESC, hzdept_r ASC") ;
#
Pedon.query<- paste0("SELECT muaggatt.musym, muaggatt.drclassdcd, muaggatt.hydgrpdcd, component.mukey, component.cokey, component.compname, component.taxorder, component.taxsuborder, component.taxgrtgroup, component.taxsubgrp, comppct_r, majcompflag, slope_r, hzdept_r, hzdepb_r,hzthk_r, hzname, awc_r, sandtotal_r, silttotal_r, claytotal_r, om_r,dbtenthbar_r, dbthirdbar_r, dbfifteenbar_r, fraggt10_r, frag3to10_r, sieveno10_r, sieveno40_r, sieveno200_r, ksat_r  FROM component JOIN chorizon ON component.cokey = chorizon.cokey
JOIN muaggatt ON muaggatt.mukey = component.mukey AND component.mukey IN", in.statement2," ORDER BY component.mukey, comppct_r DESC, hzdept_r ASC") ;
# now get component and horizon-level data for these map unit keys
Pedon.info<-SDA_query(Pedon.query);
head(Pedon.info) ;
str(Pedon.info)  ;
View(Pedon.info)
# filter components that are the major components of each unit map with the Flag majcompflag=='Yes'
Pedon.info.MajorC<-Pedon.info[which(Pedon.info$majcompflag == 'Yes'),]  ;
head(Pedon.info.MajorC) ;
str(Pedon.info.MajorC)  ;
# check if there are mukeys with more than one dominant component
Pedon.info.MajorC$mukey.factor<-as.factor(Pedon.info.MajorC$mukey) ;
str(Pedon.info.MajorC$mukey.factor)
Pedon.info.MajorC$mukey_comppct_r<-paste(Pedon.info.MajorC$mukey.factor,Pedon.info.MajorC$comppct_r, sep = "_") ;
# Select major component mukeys that have also the highest component percent comppct_r
head(Pedon.info.MajorC)  ;
Dominant<- aggregate(comppct_r ~ mukey.factor, data=Pedon.info.MajorC, FUN="max" , drop=T, simplify=T) ;
head(Dominant)  ;
str(Dominant) ;
Dominant$mukey_comppct_r<-paste(Dominant$mukey.factor,Dominant$comppct_r, sep ="_");
Mukey.Pedon<-Pedon.info.MajorC[Pedon.info.MajorC$mukey_comppct_r %in% Dominant$mukey_comppct_r,]  ;
str(Mukey.Pedon) ;
# Creating Mukey ID for each dominant component
Mukey.Pedon$mukey_ID<-as.character(Mukey.Pedon$mukey) ;
str(Mukey.Pedon);
#  Transform the Pedon.info query in to the right format to be converted into a SoilProfileCollection object
#   https://ncss-tech.github.io/AQP/aqp/aqp-intro.html
#Pedon.info$id<-Pedon.info$mukey ;
# Pedon.info$top<-Pedon.info$hzdept_r ;
# Pedon.info$bottom<-Pedon.info$hzdept_r ;
#Pedon.info$name<-Pedon.info$hzname ;
depths(Mukey.Pedon)<-mukey_ID ~ hzdept_r + hzdepb_r  ;
str(Mukey.Pedon@horizons) ;
plot(Mukey.Pedon, name='hzname',color='dbthirdbar_r')  ;
plot(Mukey.Pedon[3:10,], name='hzname',color='hydgrp')  ;
###############################################################################################################
#                            Get the curve number from the hydrology condition in surgo and the
#                             crop type from the TR55 publication
#                          "Urban Hydrology for Small Watersheds TR-55." 1986. USDA-NRCS.
#                      https://www.nrcs.usda.gov/Internet/FSE_DOCUMENTS/stelprdb1044171.pdf.
#
###############################################################################################################
### Read the table comiled in the excel file CurveNumberTR55.xlsx
### for the future, the tables for Ag and pasture and arid lands can be combined iot one and can be used for everything
TR55_AgLands.table<-read.xlsx('C:\\Felipe\\CYCLES\\CyclesRCodeScripts\\CurveNumberTR55.xlsx', sheet='CultivatedAgriculture',startRow=2)
str(TR55_AgLands.table)
### Transform the table wide format into a long format with the melt fuction in the reshape2 package
TR55_AgLands<-melt(TR55_AgLands.table, id.vars=c('Cover.type', 'Treatment' , 'Hydrologic.condition'), measure.vars=c('A' , 'B' , 'C' , 'D'), variable.name ='HydrologicSoilGroup', value.name = 'Curve.Number')  ;
str(TR55_AgLands)
### completing the variables missing from the SSURGO query
str(Mukey.Pedon@horizons)
View(Mukey.Pedon@horizons)
Mukey.Pedon@horizons$Cover.type<-c('Row crops') ;
Mukey.Pedon@horizons$Treatment<-c('SR');
Mukey.Pedon@horizons$Hydrologic.condition<-c('Good') ;
### Link the pedon data frame  with the TR55 data frame to get the curve number
Pedon.dataframe<-Mukey.Pedon@horizons ;
str(Pedon.dataframe)
Mukey.Pedon@horizons<-merge(Pedon.dataframe,TR55_AgLands,by.x=c('Cover.type', 'Treatment', 'Hydrologic.condition', 'hydgrpdcd'), by.y=c('Cover.type', 'Treatment' , 'Hydrologic.condition','HydrologicSoilGroup' ), all.x=T) ;
Mukey.Pedon@horizons[order(Mukey.Pedon@horizons$mukey),]
str(Mukey.Pedon)
###############################################################################################################
#                           Use the slab funtion on the AQP package to obtain the average parameters for the
#                             0 to 20 cm aggregation
###############################################################################################################
Mukey.Pedon.Slabs_Cycles_0_20<-slab(Mukey.Pedon,fm=mukey_ID ~ claytotal_r + sandtotal_r + silttotal_r + om_r + dbthirdbar_r , slab.structure = c(0,20) , slab.fun=mean,na.rm=T ) ;
Mukey.Pedon.Cycles_0_20.1<-dcast(Mukey.Pedon.Slabs_Cycles_0_20, mukey_ID + top + bottom ~ variable)  ;
Mukey.Pedon.Cycles_0_20<-merge(Mukey.Pedon.Cycles_0_20.1, unique(Mukey.Pedon@horizons[, c('mukey_ID','musym','compname', 'Cover.type' ,'Treatment', 'Hydrologic.condition' , 'hydgrpdcd' , 'drclassdcd', 'Curve.Number','taxorder', 'taxsuborder' , 'taxgrtgroup' , 'taxsubgrp')]), by=c('mukey_ID'), all.x=T) ;
str(Mukey.Pedon.Cycles_0_20)
depths(Mukey.Pedon.Cycles_0_20)<-mukey_ID ~ top + bottom  ;
str(Mukey.Pedon.Cycles_0_20@horizons)
plot(Mukey.Pedon.Cycles_0_20,  name='hzname', color='Curve.Number') ;
###############################################################################################################
#                           Use the slab funtion on the AQP package to obtain the average parameters for the
#                             0 to 100 cm aggregation
###############################################################################################################
Mukey.Pedon.Slabs_Cycles_0_100<-slab(Mukey.Pedon,fm=mukey_ID ~ claytotal_r + sandtotal_r + silttotal_r + om_r + dbthirdbar_r , slab.structure = c(0,100) , slab.fun=mean,na.rm=T ) ;
Mukey.Pedon.Cycles_0_100.1<-dcast(Mukey.Pedon.Slabs_Cycles_0_100, mukey_ID + top + bottom ~ variable)  ;
Mukey.Pedon.Cycles_0_100<-merge(Mukey.Pedon.Cycles_0_100.1, unique(Mukey.Pedon@horizons[, c('mukey_ID','musym','compname', 'Cover.type' ,'Treatment', 'Hydrologic.condition' , 'hydgrpdcd' , 'drclassdcd', 'Curve.Number','taxorder', 'taxsuborder' , 'taxgrtgroup' , 'taxsubgrp')]), by=c('mukey_ID')) ;
str(Mukey.Pedon.Cycles_0_100)
depths(Mukey.Pedon.Cycles_0_100)<-mukey_ID ~ top + bottom  ;
str(Mukey.Pedon.Cycles_0_100@horizons)
plot(Mukey.Pedon.Cycles_0_100,  name='hzname', color='sandtotal_r') ;
plot(Mukey.Pedon.Cycles_0_100,  name='hzname', color='Curve.Number') ;
###############################################################################################################
#                          Get all the data together into a table for RF analysis
#
###############################################################################################################
str(Mukey.Pedon.Cycles_0_20@horizons)
names(Mukey.Pedon.Cycles_0_20@horizons)[c(4:8)]<-c("claytotal_r_0-20" , "sandtotal_r_0-20" , "silttotal_r_0-20" , "om_r_0-20" , "dbthirdbar_r_0-20") ;
str(Mukey.Pedon.Cycles_0_100@horizons)
names(Mukey.Pedon.Cycles_0_100@horizons)[c(4:8)]<-c("claytotal_r_0-100" , "sandtotal_r_0-100" , "silttotal_r_0-100" , "om_r_0-100" , "dbthirdbar_r_0-100") ;
Soil.Data.Agg<-merge(Mukey.Pedon.Cycles_0_20@horizons[],Mukey.Pedon.Cycles_0_100@horizons,by=c('mukey_ID', 'musym', 'Cover.type', 'Treatment','Hydrologic.condition', 'hydgrpdcd' , 'Curve.Number', 'taxorder' ,'taxsuborder' , 'taxgrtgroup','taxsubgrp', 'compname' , 'drclassdcd')) ;
View(Soil.Data.Agg)
str(Soil.Data.Agg)
#### create a directory to put the aggregated data together
dir.create('CyclesSoilsFromSSURGO', showWarnings = T) ;
# write.xlsx(x=Soil.Data.Agg, file='./CyclesSoilsFromSSURGO/agregated.data.xlsx', sheetName='agregated_data')
Cycles_Soil_SSURGO<-createWorkbook() ;
addWorksheet(Cycles_Soil_SSURGO, sheetName='agregated_data') ;
writeData(Cycles_Soil_SSURGO, sheet='agregated_data',Soil.Data.Agg);
#saveWorkbook(wb=Cycles_Soil_SSURGO, file='./CyclesSoilsFromSSURGO/agregated.data.xlsx',overwrite = T);
###############################################################################################################
#                           Use the slab funtion on the AQP package to obtain the parameters at the layers
#                             needed for Cycles
###############################################################################################################
Mukey.Pedon.Cycles.Slabs<-slab(Mukey.Pedon,fm=mukey_ID ~ claytotal_r + sandtotal_r + silttotal_r + om_r + dbthirdbar_r , slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
Mukey.Pedon.Cycles.1<-dcast(Mukey.Pedon.Cycles.Slabs, mukey_ID + top + bottom ~ variable) ;
str(Mukey.Pedon.Cycles.1)
Mukey.Pedon.Cycles<-merge(Mukey.Pedon.Cycles.1, unique(Mukey.Pedon@horizons[, c('mukey_ID','musym', 'compname' ,'Cover.type' ,'Treatment', 'Hydrologic.condition' , 'hydgrpdcd' , 'drclassdcd' , 'Curve.Number','taxorder', 'taxsuborder' , 'taxgrtgroup' , 'taxsubgrp')]), by=c('mukey_ID')) ;
str(Mukey.Pedon.Cycles)
depths(Mukey.Pedon.Cycles)<-mukey_ID ~ top + bottom  ;
str(Mukey.Pedon.Cycles@horizons)
plot(Mukey.Pedon, name='hzname',color='sandtotal_r')  ;
plot(Mukey.Pedon.Cycles,  name='hzname', color='Curve.Number') ;
View(Mukey.Pedon.Cycles@horizons)
str(Mukey.Pedon.Cycles@horizons)
###############################################################################################################
#
#                       Add the carbon saturation procedure according to the paper by Virgina Pravia
#
###############################################################################################################
#####
#  Pravia, M. Virginia, Armen R. Kemanian, José A. Terra, Yuning Shi, Ignacio Macedo, and Sarah Goslee. 2019. “Soil Carbon Saturation, Productivity, and Carbon #   and Nitrogen Cycling in Crop-Pasture Rotations.” Agricultural Systems 171 (May): 13–22. https://doi.org/10.1016/j.agsy.2018.11.001.
#
# Soil Carbon Saturation Eq 1  Cx= 0.021 + 0.038 fc   ; Cx = Carbon Saturation kg C kg soil-1 , fc clay fraction
#Conversion from Organic carboin to Organic Mater    OM = 1.72 x Cx  ; OM organic mater fraction  kg OM kg soil-1
#
######
### Add a column to determine if the layer is carbon saturated
Mukey.Pedon.Cycles@horizons$Cx_as_OM<-((Mukey.Pedon.Cycles@horizons$claytotal_r*0.038)+21.1)*1.72 ;
##### Select the Horizons that are Carbon saturated and add the column CSaturated and mark them with "TRUE" or "FALSE"
Mukey.Pedon.Cycles@horizons$CSaturated<-Mukey.Pedon.Cycles@horizons$om_r > Mukey.Pedon.Cycles@horizons$Cx_as_OM;
#### Ad the column NonSatOM  to the database and correct the saturated values of OM with the Cx_as_OM
Mukey.Pedon.Cycles@horizons$NonSatOM<-ifelse(Mukey.Pedon.Cycles@horizons$CSaturated=="TRUE", Mukey.Pedon.Cycles@horizons$Cx_as_OM, Mukey.Pedon.Cycles@horizons$om_r ) ;
View(Mukey.Pedon.Cycles@horizons[,c('mukey_ID', 'om_r','claytotal_r', 'Cx_as_OM', 'CSaturated' , 'NonSatOM')])
names(Mukey.Pedon.Cycles@horizons)
Mukey.Pedon.Cycles@horizons$Cx_as_OM<-((Mukey.Pedon.Cycles@horizons$claytotal_r/100*0.038)+0.021)*172 ;
Mukey.Pedon.Cycles@horizons$Cx_as_OM<-((Mukey.Pedon.Cycles@horizons$claytotal_r/100*0.038)+0.021)*172 ;
##### Select the Horizons that are Carbon saturated and add the column CSaturated and mark them with "TRUE" or "FALSE"
Mukey.Pedon.Cycles@horizons$CSaturated<-Mukey.Pedon.Cycles@horizons$om_r > Mukey.Pedon.Cycles@horizons$Cx_as_OM;
#### Ad the column NonSatOM  to the database and correct the saturated values of OM with the Cx_as_OM
Mukey.Pedon.Cycles@horizons$NonSatOM<-ifelse(Mukey.Pedon.Cycles@horizons$CSaturated=="TRUE", Mukey.Pedon.Cycles@horizons$Cx_as_OM, Mukey.Pedon.Cycles@horizons$om_r ) ;
View(Mukey.Pedon.Cycles@horizons[,c('mukey_ID', 'om_r','claytotal_r', 'Cx_as_OM', 'CSaturated' , 'NonSatOM')])
names(Mukey.Pedon.Cycles@horizons)
