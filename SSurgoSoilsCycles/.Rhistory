#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
###############################################################################################################
#                             Setting up working directory  Loading Packages and Setting up working directory
###############################################################################################################
#      set the working directory
setwd('C:/Felipe/CYCLES/CyclesRCodeScripts/CyclesRCodeScripts/SSurgoSoilsCycles') ;
install.packages("aqp", dep=TRUE)
library(rgdal) ;
install.packages("tidyr")
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
###############################################################################################################
#                             Setting up working directory  Loading Packages and Setting up working directory
###############################################################################################################
#      set the working directory
setwd('C:/Felipe/CYCLES/CyclesRCodeScripts/CyclesRCodeScripts/SSurgoSoilsCycles') ;
###############################################################################################################
#                            Install the packages that are needed
###############################################################################################################
# Install the packages that are needed #
# Install the packages that are needed #
# install.packages("tidyr")
# install.packages("raster", dep = TRUE)
# install.packages('Hmisc', dep=TRUE)
# install.packages('soilDB', dep=TRUE) # stable version from CRAN + dependencies
# install.packages("soilDB", repos="http://R-Forge.R-project.org") # most recent copy from r-forge
# install.packages("SSOAP", repos = "http://www.omegahat.org/R", type="source") # SSOAP and XMLSchema
# install.packages("rgdal", dep = TRUE)
# install.packages("rgeos", dep = TRUE)
# install.packages("RColorBrewer")
# install.packages("latticeExtra")
# install.packages("aqp", dep=TRUE)
###############################################################################################################
#                           load the libraries that are neded
###############################################################################################################
library(rgdal) ;
library(soilDB) ;
library(aqp) ;
library(plyr) ;
library(reshape2) ;
library(tidyr) ;
###############################################################################################################
#                           import the shape files from QGIS with the MUKEY mode from each triangle
###############################################################################################################
########### Read infromation about the shape files ###########
Project.mesh.info<-ogrInfo('C:/Felipe/PIHM-CYCLES/PIHM/PIHM SIMULATIONS/YAHARA/Oct0920191330/DomainDecomposition/MergeFeatures_q30_a1000000_o.shp')  ;
#### read the shape file that has been created in QGIS using the zonal statistics
Project.GSSURGO<-readOGR('C:/Felipe/PIHM-CYCLES/PIHM/PIHM SIMULATIONS/YAHARA/Oct0920191330/DomainDecomposition/MergeFeatures_q30_a1000000_o.shp')  ;
head(Project.GSSURGO@data)
str(Project.GSSURGO, max.level = 2) ;
plot(Project.GSSURGO) ;
str(Project.GSSURGO@data)  ;
#### Extract the Mukeys corresponding to the mode in each mesh triangle
Project.GSSURGO@data$MUKEYS.mode<-as.factor(Project.GSSURGO@data$GSURGO_Mod) ;
MUKEYS<-levels(Project.GSSURGO@data$MUKEYS.mode)  ;
str(MUKEYS)  ;
###############################################################################################################
#                           Query the Soil Data access database with SQL through R
###############################################################################################################
# from https://sdmdataaccess.sc.egov.usda.gov/queryhelp.aspx
# and https://sdmdataaccess.sc.egov.usda.gov/documents/ReturningSoilTextureRelatedAttributes.pdf
# --Sample query begins.
# --Note that a pair of dashes denotes the beginning of a comment.
# SELECT
# saversion, saverest, -- attributes from table "sacatalog"
# l.areasymbol, l.areaname, l.lkey, -- attributes from table "legend"
# musym, muname, museq, mu.mukey, -- attributes from table "mapunit"
# comppct_r, compname, localphase, slope_r, c.cokey, -- attributes from table "component"
# hzdept_r, hzdepb_r, ch.chkey, -- attributes from table "chorizon"
# sandtotal_r, silttotal_r, claytotal_r, --total sand, silt and clay fractions from table "chorizon"
# sandvc_r, sandco_r, sandmed_r, sandfine_r, sandvf_r,--sand sub-fractions from table "chorizon"
# texdesc, texture, stratextsflag, chtgrp.rvindicator, -- attributes from table "chtexturegrp"
# texcl, lieutex, -- attributes from table "chtexture"
# texmod -- attributes from table "chtexturemod"
# FROM sacatalog sac
# INNER JOIN legend l ON l.areasymbol = sac.areasymbol AND l.areatypename = 'Non-MLRA Soil Survey Area'
# INNER JOIN mapunit mu ON mu.lkey = l.lkey
# AND mu.mukey IN
# ('107559','107646','107674','107682','107707','107794','107853','107854','107865','107867','107869','107870','107871')
# LEFT OUTER JOIN component c ON c.mukey = mu.mukey
# LEFT OUTER JOIN chorizon ch ON ch.cokey = c.cokey
# LEFT OUTER JOIN chtexturegrp chtgrp ON chtgrp.chkey = ch.chkey
# LEFT OUTER JOIN chtexture cht ON cht.chtgkey = chtgrp.chtgkey
# LEFT OUTER JOIN chtexturemod chtmod ON chtmod.chtkey = cht.chtkey
# --WHERE.
# --ORDER BY l.areaname, museq, comppct_r DESC, compname, hzdept_r -- standard soil report ordering
# --Sample query ends.
# extract the map unit keys from the RAT, and format for use in an SQL IN-statement
#in.statement2 <- format_SQL_in_statement(MUKEYS$ID);
in.statement2 <- format_SQL_in_statement(MUKEYS);
# The above is teh same as the two instructions below combined
# Temp_1 <- paste(MUKEYS, collapse="','") ;
# Temp_2<- paste("('", Temp_1 , "')", sep='') ;
# format query in SQL- raw data are returned
Pedon.query<- paste0("SELECT component.mukey, component.cokey, compname, comppct_r, majcompflag, slope_r, hzdept_r, hzdepb_r,hzthk_r, hzname, awc_r, sandtotal_r, silttotal_r, claytotal_r, om_r,dbtenthbar_r, dbthirdbar_r, dbfifteenbar_r, fraggt10_r, frag3to10_r, sieveno10_r, sieveno40_r, sieveno200_r, ksat_r  FROM component JOIN chorizon ON component.cokey = chorizon.cokey AND mukey IN ", in.statement2," ORDER BY mukey, comppct_r DESC, hzdept_r ASC") ;
# now get component and horizon-level data for these map unit keys
Pedon.info<- SDA_query(Pedon.query);
head(Pedon.info) ;
str(Pedon.info)  ;
# filter components that are the major components of each unit map with the Flag majcompflag=='Yes'
Pedon.info.MajorC<-Pedon.info[which(Pedon.info$majcompflag == 'Yes'),]  ;
head(Pedon.info.MajorC) ;
str(Pedon.info.MajorC)  ;
# check if there are mukeys with more than one dominant component
Pedon.info.MajorC$mukey.factor<-as.factor(Pedon.info.MajorC$mukey) ;
str(Pedon.info.MajorC$mukey.factor)
Pedon.info.MajorC$mukey_comppct_r<-paste(Pedon.info.MajorC$mukey.factor,Pedon.info.MajorC$comppct_r, sep = "_") ;
# Select major component mukeys that have also the highest component percent comppct_r
head(Pedon.info.MajorC)  ;
Dominant<- aggregate(comppct_r ~ mukey.factor, data=Pedon.info.MajorC, FUN="max" , drop=T, simplify=T) ;
head(Dominant)  ;
str(Dominant) ;
Dominant$mukey_comppct_r<-paste(Dominant$mukey.factor,Dominant$comppct_r, sep ="_");
Mukey.Pedon<-Pedon.info.MajorC[Pedon.info.MajorC$mukey_comppct_r %in% Dominant$mukey_comppct_r,]  ;
str(Mukey.Pedon) ;
# Creating Mukey ID for each dominant component
Mukey.Pedon$mukey_ID<-as.character(Mukey.Pedon$mukey) ;
str(Mukey.Pedon);
#  Transform the Pedon.info query in to the right format to be converted into a SoilProfileCollection object
#   https://ncss-tech.github.io/AQP/aqp/aqp-intro.html
#Pedon.info$id<-Pedon.info$mukey ;
# Pedon.info$top<-Pedon.info$hzdept_r ;
# Pedon.info$bottom<-Pedon.info$hzdept_r ;
#Pedon.info$name<-Pedon.info$hzname ;
depths(Mukey.Pedon)<-mukey_ID ~ hzdept_r + hzdepb_r  ;
str(Mukey.Pedon) ;
plot(Mukey.Pedon, name='hzname',color='dbthirdbar_r')  ;
str(Cycles.soil.data)
Cycles.soil.data<-slab(Mukey.Pedon,fm = ~sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
str(Cycles.soil.data)
head(Cycles.soil.data)
Cycles.soil.data<-slab(Mukey.Pedon[1:5],fm = ~sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
head(Cycles.soil.data)
View(Cycles.soil.data)
str(Mukey.Pedon) ;
plot(Mukey.Pedon[1:10], name='hzname',color='dbthirdbar_r')  ;
plot(Mukey.Pedon[3:10], name='hzname',color='dbthirdbar_r')  ;
plot(Mukey.Pedon[3:10,], name='hzname',color='dbthirdbar_r')  ;
Cycles.soil.data<-slab(Mukey.Pedon[1:5,],fm = ~sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
str(Cycles.soil.data)
View(Cycles.soil.data)
Cycles.soil.data<-slab(Mukey.Pedon,fm = ~sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
str(Cycles.soil.data)
View(Cycles.soil.data)
str(Mukey.Pedon@horizons) ;
d <- ldply(1:9, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP')
depths(d) <- id ~ top + bottom
d@site
str(Mukey.Pedon@site) ;
Cycles.soil.data<-slab(Mukey.Pedon,fm = id ~sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
str(Cycles.soil.data)
View(Cycles.soil.data)
d@horizons
Mukey.Pedon@site
Mukey.Pedon@horizons
str(Mukey.Pedon@horizons) ;
Cycles.soil.data<-slab(Mukey.Pedon,fm = mukey ~sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
str(Cycles.soil.data)
View(Cycles.soil.data)
data(sp1)depths(sp1) <- id ~ top + bottom
data(sp1)
depths(sp1) <- id ~ top + bottom
View(sp1)
rm(sp1)
data(sp1)
View(sp1)
depths(sp1) <- id ~ top + bottom
sp1@horizons
a <- slab(sp1, fm = ~ prop)
View(a)
b <- slab(sp1, fm = ~ prop, slab.structure=5)
View(b)
data(sp1)depths(sp1) <- id ~ top + bottom
data(sp1)
depths(sp1) <- id ~ top + bottom
sp1@horizons
View(sp1)
View(sp1@horizons)
a <- slab(sp1, fm = id ~ prop, slab.fun=identity)
View(a)
d <- ldply(1:9, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP')
depths(d) <- id ~ top + bottom
gsm.depths <- c(0, 5, 15, 30, 60, 100, 200)
plot(d)
View(d@idcol)
View(d@site)
View(d@horizons)
str(d@horizons)
d.gsm <- slab(d, fm=id ~ p1, slab.structure = gsm.depths, slab.fun = mean, na.rm=TRUE)
str(d.gsm )
str(Mukey.Pedon@horizons) ;
Mukey.Try<-Mukey.Pedon[3:5,] ;
str(Mukey.Try)
plot(Mukey.Try)
plot(Mukey.Try,name='hzname',color='dbthirdbar_r')
d.gsm.pedons <- dcast(d.gsm, id + top + bottom ~ variable, value.var = 'value')
depths(d.gsm.pedons) <- id ~ top + bottom
d.gsm.pedons$hzname <- profileApply(d.gsm.pedons, function(i) {paste0('GSM-', 1:nrow(i))})
plot(d, color='p1')
plot(d.gsm.pedons, color='p1')
d <- ldply(1:9, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP')
View(d)
depths(d) <- id ~ top + bottom
View(d)
View(d@site)
View(Mukey.Try@site)
View(Mukey.Try@horizons)
Cycles.soil.data<-slab(Mukey.Try,fm=id ~ sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
View(Mukey.Try@horizons)
str(Mukey.Try)
Cycles.soil.data<-slab(Mukey.Try,fm=mukey_ID ~ sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
str(Cycles.soil.data)
View(Cycles.soil.data)
Cycles.soil.data<-slab(Mukey.Try,fm=mukey ~ sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
str(Cycles.soil.data)
str(Cycles.soil.data)
View(Cycles.soil.data)
Cycles.soil.data<-slab(Mukey.Try,fm=mukey ~ sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
Mukey.Try<-Mukey.Pedon[3:5,] ;
plot(Mukey.Try,name='hzname',color='dbthirdbar_r')
str(Mukey.Try)
View(Mukey.Try@horizons)
Cycles.soil.data<-slab(Mukey.Try,fm=mukey ~ sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
Cycles.soil.data<-slab(Mukey.Try,fm=mukeyID ~ sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
Cycles.soil.data<-slab(Mukey.Try,fm=mukey_ID ~ sandtotal_r, slab.structure = c(0,5,10,20,40,60,80,100) , slab.fun=mean,na.rm=T ) ;
library(tidyr)
data(iris)
str(iris)
dat <- gather(iris, variable, value, -Species)
install.packages("tidyr")
dat <- gather(iris, variable, value, -Species)
library(tidyr)
library(tidyr) ;
dat <- gather(iris, variable, value, -Species)
library(dplyr) ;
library(rgdal) ;
install.packages("dplyr")
library(rgdal) ;
install.packages("tidyr")
library(tidyr) ;
install.packages(c("AER", "animation", "ape", "assertthat", "backports", "bayesm", "BH", "blob", "boot", "broom", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "class", "classInt", "clhs", "cli", "clipr", "cluster", "coda", "codetools", "colorspace", "compositions", "covr", "curl", "data.table", "dbplyr", "ddalpha", "deldir", "devtools", "digest", "dimRed", "doParallel", "dtplyr", "e1071", "EcoHydRology", "eigenmodel", "energy", "ergm", "ergm.count", "evaluate", "expm", "ffbase", "FNN", "forcats", "foreach", "foreign", "formatR", "fs", "gdtools", "geojson", "geojsonio", "geojsonlint", "geometry", "geosphere", "ggmap", "ggplot2", "git2r", "glue", "googleVis", "gower", "gplots", "gstat", "gtable", "haven", "hexbin", "hexView", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "huge", "igraph", "ipred", "irlba", "iterators", "jomo", "jpeg", "jsonvalidate", "kernlab", "KernSmooth", "KFAS", "knitcitations", "knitr", "Lahman", "later", "lava", "lazyeval", "leaflet", "limSolve", "lme4", "lmtest", "lpSolve", "lwgeom", "magick", "maptools", "mapview", "markdown", "markovchain", "MASS", "Matching", "Matrix", "maxLik", "mcmc", "mgcv", "mice", "microbenchmark", "mime", "miscTools", "mitml", "ModelMetrics", "multcomp", "mvtnorm", "ncdf4", "ncmeta", "network", "networkDynamic", "nlme", "numDeriv", "nycflights13", "openair", "openssl", "openxlsx", "ordinal", "packrat", "permute", "pkgbuild", "pkgconfig", "plotKML", "plotly", "plotrix", "pls", "polspline", "processx", "prodlim", "progress", "promises", "protolite", "ps", "purrr", "quadprog", "quantmod", "quantreg", "R.oo", "R.utils", "R6", "randomForestSRC", "rasterVis", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "RefManageR", "registry", "remotes", "rgdal", "rgenoud", "rgeos", "Rglpk", "RgoogleMaps", "rio", "rJava", "RJSONIO", "rlang", "rmarkdown", "rms", "RMySQL", "RNetCDF", "rngtools", "robustbase", "RODBC", "rpart", "RSQLite", "rstudioapi", "rvest", "sandwich", "scales", "selectr", "sf", "sfsmisc", "shiny", "slam", "soilDB", "sp", "spData", "spdep", "stars", "statnet", "statnet.common", "stringi", "stringr", "survey", "survival", "svglite", "tables", "tergm", "TH.data", "tinytex", "tmap", "tmaptools", "tsna", "TTR", "units", "usethis", "V8", "vdiffr", "vegan", "VGAM", "vioplot", "WDI", "whisker", "xfun", "XML", "xml2", "xtable", "xts", "Zelig", "zip", "zoo"))
install.packages(c("boot", "foreign", "KernSmooth", "mgcv", "nlme", "survival"), lib="C:/Users/frm10/Documents/R/R-3.6.1/library")
install.packages(c("AER", "animation", "ape", "assertthat", "backports", "bayesm", "BH", "blob", "boot", "broom", "callr", "car", "carData", "caret", "caTools", "checkmate", "chron", "class", "classInt", "clhs", "cli", "clipr", "cluster", "coda", "codetools", "colorspace", "compositions", "covr", "curl", "data.table", "dbplyr", "ddalpha", "deldir", "devtools", "digest", "dimRed", "doParallel", "dtplyr", "e1071", "EcoHydRology", "eigenmodel", "energy", "ergm", "ergm.count", "evaluate", "expm", "ffbase", "FNN", "forcats", "foreach", "foreign", "formatR", "fs", "gdtools", "geojson", "geojsonio", "geojsonlint", "geometry", "geosphere", "ggmap", "ggplot2", "git2r", "glue", "googleVis", "gower", "gplots", "gstat", "gtable", "haven", "hexbin", "hexView", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "huge", "igraph", "ipred", "irlba", "iterators", "jomo", "jpeg", "jsonvalidate", "kernlab", "KernSmooth", "KFAS", "knitcitations", "knitr", "Lahman", "later", "lava", "lazyeval", "leaflet", "limSolve", "lme4", "lmtest", "lpSolve", "lwgeom", "magick", "maptools", "mapview", "markdown", "markovchain", "MASS", "Matching", "Matrix", "maxLik", "mcmc", "mgcv", "mice", "microbenchmark", "mime", "miscTools", "mitml", "ModelMetrics", "multcomp", "mvtnorm", "ncdf4", "ncmeta", "network", "networkDynamic", "nlme", "numDeriv", "nycflights13", "openair", "openssl", "openxlsx", "ordinal", "packrat", "permute", "pkgbuild", "pkgconfig", "plotKML", "plotly", "plotrix", "pls", "polspline", "processx", "prodlim", "progress", "promises", "protolite", "ps", "purrr", "quadprog", "quantmod", "quantreg", "R.oo", "R.utils", "R6", "randomForestSRC", "rasterVis", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "RefManageR", "registry", "remotes", "rgdal", "rgenoud", "rgeos", "Rglpk", "RgoogleMaps", "rio", "rJava", "RJSONIO", "rlang", "rmarkdown", "rms", "RMySQL", "RNetCDF", "rngtools", "robustbase", "RODBC", "rpart", "RSQLite", "rstudioapi", "rvest", "sandwich", "scales", "selectr", "sf", "sfsmisc", "shiny", "slam", "soilDB", "sp", "spData", "spdep", "stars", "statnet", "statnet.common", "stringi", "stringr", "survey", "survival", "svglite", "tables", "tergm", "TH.data", "tinytex", "tmap", "tmaptools", "tsna", "TTR", "units", "usethis", "V8", "vdiffr", "vegan", "VGAM", "vioplot", "WDI", "whisker", "xfun", "XML", "xml2", "xtable", "xts", "Zelig", "zip", "zoo"))
